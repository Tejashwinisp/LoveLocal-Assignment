class Solution:
    def maximalSquare(self, matrix: List[List[str]]) -> int:
        if not matrix or not matrix[0]:
            return 0
        
        rows, cols = len(matrix), len(matrix[0])
        dp = [[0] * (cols + 1) for _ in range(rows + 1)]
        max_side = 0

        for i in range(1, rows + 1):
            for j in range(1, cols + 1):
                if matrix[i-1][j-1] == '1':
                    dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1
                    max_side = max(max_side, dp[i][j])

        return max_side * max_side


Algorithm:
If the matrix is empty or the first row is empty , return 0 because there are no elements to form a square.
rows and cols are initialized with the number of rows and columns in the matrix.
dp is a 2D array initialized with zeros to store the maximum side length of the square ending at the current position.
max_side is initialized to 0 to keep track of the maximum side length seen so far.
Iterate through each cell in the matrix, starting from the second row and second column (index 1).
For each cell, if the corresponding element in the original matrix is '1':
  Calculate the side length of the square ending at this position based on the minimum of the values in the cells to the left, above, and diagonally left-up.
  Update dp[i][j] with this calculated value.
  Update max_side with the maximum of its current value and the calculated side length.
The final result is the square of max_side, representing the area of the largest square.
