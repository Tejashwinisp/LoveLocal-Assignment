class Solution:
    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:
        if not nums:
            return None

        root = TreeNode(0)  # Placeholder root node
        stack = [(root, 0, len(nums) - 1)]

        while stack:
            node, left, right = stack.pop()
            mid = (left + right) // 2
            node.val = nums[mid]

            if left <= mid - 1:
                node.left = TreeNode(0)
                stack.append((node.left, left, mid - 1))

            if mid + 1 <= right:
                node.right = TreeNode(0)
                stack.append((node.right, mid + 1, right))

        return root

Algorithm:
If the input array nums is empty, the function returns None since there are no elements to construct the BST.
root node is created with the value 0.
A stack is initialized with a tuple containing the placeholder root node, the left index (0), and the right index (len(nums) - 1). The stack will be used to keep track of nodes to be processed.
The code enters a while loop that continues until the stack is empty.
In each iteration, it pops a tuple from the stack, representing a node to be processed (node), along with its corresponding left and right indices (left and right).
It calculates the middle index mid as the average of left and right.
The value of the current node is updated with the element at the middle index of the sorted array.
If there are elements to the left of the middle index (left <= mid - 1), a left child node is created, and the corresponding tuple is pushed onto the stack for further processing.
If there are elements to the right of the middle index (mid + 1 <= right), a right child node is created, and the corresponding tuple is pushed onto the stack for further processing.
Finally, the function returns the modified placeholder root node, which now represents the root of the constructed Balanced BST.
